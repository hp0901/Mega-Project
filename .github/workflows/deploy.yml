# Name of your workflow
name: MERN App CI-CD Pipeline

# Run this workflow on a push to the 'main' branch
on:
  push:
    branches:
      - main

# Define the deployment job
jobs:
  deploy:
    # Use the latest GitHub-hosted Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (same version as your server)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm' # Cache npm dependencies

      # --- 1. FIXED (React in root) ---
      - name: Build React Client
        run: |
          echo "Building React client..."
          # Running in root, as per your screenshot
          npm install
          
          # --- THIS IS THE FIX ---
          # We set CI=false to prevent ESLint warnings from failing the build
          CI=false npm run build 
          
          # This will create a 'build' folder in the root

      # --- 2. FIXED (Node.js in Backend) ---
      - name: Install Server Dependencies
        run: |
          echo "Installing server dependencies..."
          # Changed to 'Backend' to match your folder
          cd Backend 
          npm install --omit=dev # Production dependencies only

      # --- 3. FIXED (Copy 'build' and 'Backend') ---
      - name: Copy built files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          # We are copying the new 'build' folder (from step 1)
          # and your 'Backend' folder (from step 2)
          source: "build, Backend"
          # This is the destination folder we created on the server
          target: "/var/www/my-app"
          # This deletes old files in the target dir before copying
          rm: true 
          
      # --- 4. FIXED (Paths on server) ---
      - name: Run post-deploy commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Set server folder name
            SERVER_FOLDER_NAME=Backend
            
            # Create the .env file in the Backend folder
            echo "Creating .env file..."
            echo "${{ secrets.DOT_ENV_SERVER }}" > /var/www/my-app/$SERVER_FOLDER_NAME/.env
            
            # --- CRITICAL: Load NVM ---
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Navigate to the Backend directory
            cd /var/www/my-app/$SERVER_FOLDER_NAME
            
            # Start or restart the backend app using pm2
            echo "Restarting PM2 application..."
            # Note: This assumes your main server file is 'server.js'
            # If it's index.js, change 'server.js' to 'index.js'
            pm2 restart my-app || pm2 start server.js --name my-app
            
            # Save the pm2 process list to run on startup
            pm2 save
            
            echo "Deployment successful!"

